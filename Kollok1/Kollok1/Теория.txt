1 вариант

1) ООП - полное определение;
ООП - это метод моделирования предметной области через объекты и их взаимодействия, служащий инструментом борьбы со сложностью реального домена.
Для чего нужно?
А) Позволяет разрезать сложную систему на иерархию слоёв и взаимосвязанных подсистем.
Б) Снижает когнитивную нагрузку и делает систему управляемой, расширяемой и устойчивой к изменениям.
В) Делает возможным стандартизацию и повторное использование компонентов.
Ключевые сущности в ООП:
А) Класс - описание типа объекта, набор атрибутов и операций.
Б) Объект — конкретная сущность класса с состоянием.
В) Интерфейс — протокол взаимодействия, набор операций и исключительных ситуаций.
Г) Паттерны и шаблоны — частные реализации инкапсуляции и управления жизненным циклом.
Основные идеи ООП:
Инкапсуляция
А) За инкапсуляцией стоит задача сокрытия сложности и изменчивости за стабильными интерфейсами.
Б) Обмен данными и поведение контролируются через методы, внешнему коду видны только нужные операции.
В) Баланс: инкапсуляция уменьшает внешнюю сложность, но может добавить внутреннюю.
Наследование
А) Позволяет выделить общие сущности и специализировать их в подклассах.
Б) Снижает дублирование, но раскрывает детали родителя и может нарушать инкапсуляцию при неправильном использовании.
Полиморфизм
А) Объекты разного типа предоставляют общий интерфейс поведения.
Б) Упрощает код клиента: он работает с абстракциями, не зная конкретной реализации.

2) Объектно-ориентированная декомпозиция;
Объектно-ориентированная декомпозиция - это разбиение сложной системы на набор взаимосвязанных объектов (классов) с четко выраженными состояниями и поведением, где каждый объект инкапсулирует данные и операции над ними.
Для чего?
А) Управляемость системы через уменьшение её сложности.
Б) Инкапсуляция данных и ответственности.
В) Гибкость и расширяемость за счёт слабой связанности и явных интерфейсов.
Основные принципы:
А) Единая обязанность: класс должен иметь одну причину для изменения.
Б) Инкапсуляция: скрывать внутреннее состояние и открывать минимальный публичный интерфейс.
В) Абстракция: выделять лишь те свойства и операции, которые важны для взаимодействия.
Г) Слабая связанность: минимизировать зависимости между классами.

3)
Дизайн ПО - это процесс систематического проектирования структуры, поведения и интерфейсов программной системы.
Цели:
А) Минимизировать зависимость между компонентами.
Б) Облегчить тестирование, отладку и развёртывание, минимизировать ошибки и упростить обнаружение дефектов.
В) Обеспечить повторное использование и масштабируемость
Хороший дизайн (принципы):
А) каждый модуль выполняет одну ясно определённую задачу.
Б) Разделение уровней ответственности
В) Инкапсуляция
Г) Минимальные зависимости и высокая связность внутри модулей.
Д) Явное обнаружение ошибок и логирование.
Е) не добавлять функциональности заранее, держать решение простым.
Уровни дизайна:
А) Архитектурный
Б) Модульный
В) API
Г) Данные
Примеры:
А) Интернет-магазин. Поиск и каталог в одном сервисе, заказ и корзина в другом, синхронизация через события, отдельный механизм рекламы/рекомендаций.
Б) Системы оплаты. Отдельный сервис для расчёта, платёжный шлюз в отдельном сервисе, очередь событий для надёжной доставки статусов.

4) Магическое число 7 Миллера в контексте АйТи (не менее 7 примеров из АйТи);
А) Главное меню программы: 7+-2 кнопок/переключателей и т.п. в пользовательском интерфейсе на одной вкладке
Б) 7+-2 этапов жизненного цикла фичи в продуктовой разработке. Удобно разбивать на 7+-2 стадий для планирования и контроля.
В) Удобно создать 7+-2 правил/рекомендаций по код-ревью для обучения команд
Г) Количество параметров функции - стараться держать 7+-2 параметров
Д) Число ветвей тест‑кейса на одну функцию/метод 7+-2
Е) Число уровней вложенности в методе 7+-2
Ж) Оптимальное число участников команды 7+-2

5) 5 признаков сложных систем по Гради Бучу (привести не менее 3 примеров АйТи систем, провести их через каждый из признаков)